# 1 "/home/napalm/PlatformIO/Projects/ESP8266_ToolChain/src//main.c"
# 1 "/home/napalm/PlatformIO/Projects/ESP8266_ToolChain//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/napalm/PlatformIO/Projects/ESP8266_ToolChain/src//main.c"

# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h" 1
# 28 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h"
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 1 3 4
# 10 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/_ansi.h" 1 3 4
# 10 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/_ansi.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/newlib.h" 1 3 4
# 14 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/newlib.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/_newlib_version.h" 1 3 4
# 15 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/newlib.h" 2 3 4
# 11 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/_ansi.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/config.h" 1 3 4



# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/ieeefp.h" 1 3 4
# 5 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/config.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/features.h" 1 3 4
# 6 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/config.h" 2 3 4
# 193 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/config.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/xtensa/config/core-isa.h" 1 3 4
# 194 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/config.h" 2 3 4
# 12 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/_ansi.h" 2 3 4
# 11 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 1 3 4
# 13 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/_ansi.h" 1 3 4
# 14 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 1 3 4
# 149 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 3 4

# 149 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 328 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 3 4
typedef short unsigned int wchar_t;
# 15 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 1 3 4
# 24 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_types.h" 1 3 4






# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 1 3 4
# 41 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef int __int32_t;

typedef unsigned int __uint32_t;
# 103 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef int __int_least32_t;

typedef unsigned int __uint_least32_t;
# 200 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 8 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/machine/_types.h" 2 3 4
# 25 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/lock.h" 1 3 4
# 11 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/lock.h" 3 4
typedef int _lock_t;
typedef _lock_t _LOCK_RECURSIVE_T;
typedef _lock_t _LOCK_T;
# 28 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/lock.h" 3 4
void _lock_init(_lock_t *lock);
void _lock_init_recursive(_lock_t *lock);
void _lock_close(_lock_t *lock);
void _lock_close_recursive(_lock_t *lock);
void _lock_acquire(_lock_t *lock);
void _lock_acquire_recursive(_lock_t *lock);
int _lock_try_acquire(_lock_t *lock);
int _lock_try_acquire_recursive(_lock_t *lock);
void _lock_release(_lock_t *lock);
void _lock_release_recursive(_lock_t *lock);
# 26 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 2 3 4


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 3 4
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 129 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 3 4
typedef unsigned int __size_t;
# 145 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 3 4
typedef signed int _ssize_t;
# 156 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 3 4
typedef _ssize_t __ssize_t;


# 1 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 1 3 4
# 357 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 160 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/_types.h" 2 3 4



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_RECURSIVE_T _flock_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef long __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 2 3 4






typedef unsigned long __ULong;
# 38 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};


struct _atexit {
 struct _atexit *_next;
 int _ind;
 void (*_fns[32])(void);
        struct _on_exit_args * _on_exit_args_ptr;
};
# 117 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 153 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
struct __sFILE_fake {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;

  struct _reent *_data;
};




extern void __sinit (struct _reent *);
# 181 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;


  struct _reent *_data;



  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;






  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;


  __extension__ unsigned long long _rand_next;

};
# 344 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
struct _mprec
{

  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;
};


struct _misc_reent
{

  char *_strtok_last;
  _mbstate_t _mblen_state;
  _mbstate_t _wctomb_state;
  _mbstate_t _mbtowc_state;
  char _l64a_buf[8];
  int _getdate_err;
  _mbstate_t _mbrlen_state;
  _mbstate_t _mbrtowc_state;
  _mbstate_t _mbsrtowcs_state;
  _mbstate_t _wcrtomb_state;
  _mbstate_t _wcsrtombs_state;
};



struct _reent
{


  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;

  char *_emergency;

  int __sdidinit;

  int _unspecified_locale_info;
  struct __locale_t *_locale;

  struct _mprec *_mp;

  void (*__cleanup) (struct _reent *);

  int _gamma_signgam;


  int _cvtlen;
  char *_cvtbuf;

  struct _rand48 *_r48;
  struct __tm *_localtime_buf;
  char *_asctime_buf;


  void (**_sig_func)(int);



  struct _atexit *_atexit;
  struct _atexit _atexit0;


  struct _glue __sglue;
  __FILE *__sf;
  struct _misc_reent *_misc;
  char *_signal_buf;
};

extern const struct __sFILE_fake __sf_fake_stdin;
extern const struct __sFILE_fake __sf_fake_stdout;
extern const struct __sFILE_fake __sf_fake_stderr;
# 778 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/reent.h" 3 4
extern struct _reent * _global_impure_ptr ;

void _reclaim_reent (struct _reent *);





  struct _reent * __getreent (void);
# 12 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/cdefs.h" 1 3 4
# 45 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/cdefs.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 1 3 4
# 46 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/cdefs.h" 2 3 4
# 13 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4




# 1 "/home/napalm/esp/xtensa-lx106-elf/lib/gcc/xtensa-lx106-elf/8.4.0/include/stddef.h" 1 3 4
# 18 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4


# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/xlocale.h" 1 3 4
# 9 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/xlocale.h" 3 4
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4



# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/strings.h" 1 3 4
# 44 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/strings.h" 3 4


int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);


# 25 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *restrict, const void *restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void *restrict, const void *restrict, int, size_t);
# 76 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 3 4
char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 100 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 3 4
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 175 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 3 4
# 1 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/sys/string.h" 1 3 4
# 176 "/home/napalm/esp/xtensa-lx106-elf/xtensa-lx106-elf/sys-include/string.h" 2 3 4


# 29 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h" 2
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/os_type.h" 1
# 28 "/home/napalm/esp/ESP8266_NONOS_SDK/include/os_type.h"
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ets_sys.h" 1
# 28 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ets_sys.h"
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/c_types.h" 1
# 28 "/home/napalm/esp/ESP8266_NONOS_SDK/include/c_types.h"

# 28 "/home/napalm/esp/ESP8266_NONOS_SDK/include/c_types.h"
typedef unsigned char uint8_t;
typedef signed char sint8_t;
typedef signed char int8_t;
typedef unsigned short uint16_t;
typedef signed short sint16_t;
typedef signed short int16_t;
typedef unsigned int uint32_t;
typedef signed int sint32_t;
typedef signed int int32_t;
typedef signed long long sint64_t;
typedef unsigned long long uint64_t;
typedef unsigned long long u_int64_t;
typedef float real32_t;
typedef double real64_t;

typedef unsigned char uint8;
typedef unsigned char u8;
typedef signed char sint8;
typedef signed char int8;
typedef signed char s8;
typedef unsigned short uint16;
typedef unsigned short u16;
typedef signed short sint16;
typedef signed short s16;
typedef unsigned int uint32;
typedef unsigned int u_int;
typedef unsigned int u32;
typedef signed int sint32;
typedef signed int s32;
typedef int int32;
typedef signed long long sint64;
typedef unsigned long long uint64;
typedef unsigned long long u64;
typedef float real32;
typedef double real64;



typedef unsigned int size_t;
# 79 "/home/napalm/esp/ESP8266_NONOS_SDK/include/c_types.h"
typedef enum {
    OK = 0,
    FAIL,
    PENDING,
    BUSY,
    CANCEL,
} STATUS;
# 106 "/home/napalm/esp/ESP8266_NONOS_SDK/include/c_types.h"
typedef unsigned char bool;
# 29 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ets_sys.h" 2
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/eagle_soc.h" 1
# 30 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ets_sys.h" 2

typedef uint32_t ETSSignal;
typedef uint32_t ETSParam;

typedef struct ETSEventTag ETSEvent;

struct ETSEventTag {
    ETSSignal sig;
    ETSParam par;
};

typedef void (*ETSTask)(ETSEvent *e);


typedef uint32_t ETSHandle;
typedef void ETSTimerFunc(void *timer_arg);

typedef struct _ETSTIMER_ {
    struct _ETSTIMER_ *timer_next;
    uint32_t timer_expire;
    uint32_t timer_period;
    ETSTimerFunc *timer_func;
    void *timer_arg;
} ETSTimer;
# 63 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ets_sys.h"
typedef void (* ets_isr_t)(void *);

void ets_intr_lock(void);
void ets_intr_unlock(void);
void ets_isr_attach(int i, ets_isr_t func, void *arg);
void ets_isr_mask(uint32 mask);
void ets_isr_unmask(uint32 unmask);

void NmiTimSetFunc(void (*func)(void));
# 29 "/home/napalm/esp/ESP8266_NONOS_SDK/include/os_type.h" 2
# 30 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h" 2
# 1 "include/user_config.h" 1
# 31 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h" 2

void ets_bzero(void *s, size_t n);
void ets_delay_us(uint32_t us);
void ets_install_putc1(void (*p)(char c));





int ets_memcmp(const void *str1, const void *str2, unsigned int nbyte);
void *ets_memcpy(void *dest, const void *src, unsigned int nbyte);
void *ets_memmove(void *dest, const void *src, unsigned int nbyte);
void *ets_memset(void *dest, int val, unsigned int nbyte);

int ets_strcmp(const char *s1, const char *s2);
char *ets_strcpy(char *s1, const char *s2);
int ets_strlen(const char *s);
int ets_strncmp(const char *s1, const char *s2, unsigned int n);
char *ets_strncpy(char *s1, const char *s2, unsigned int n);
char *ets_strstr(const char *s1, const char *s2);
# 65 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h"
void ets_timer_arm_new(ETSTimer *ptimer, uint32_t time, bool repeat_flag, bool ms_flag);
void ets_timer_disarm(ETSTimer *ptimer);
void ets_timer_setfn(ETSTimer *ptimer, ETSTimerFunc *pfunction, void *parg);
# 76 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h"
int ets_sprintf(char *str, const char *format, ...) __attribute__ ((format (printf, 2, 3)));
int os_printf_plus(const char *format, ...) __attribute__ ((format (printf, 1, 2)));
int ets_snprintf(char *str, unsigned int size, const char *format, ...) __attribute__ ((format (printf, 3, 4)));
# 95 "/home/napalm/esp/ESP8266_NONOS_SDK/include/osapi.h"
unsigned long os_random(void);
int os_get_random(unsigned char *buf, size_t len);
# 3 "/home/napalm/PlatformIO/Projects/ESP8266_ToolChain/src//main.c" 2
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h" 1
# 32 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h"
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ip_addr.h" 1
# 30 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ip_addr.h"
struct ip_addr {
    uint32 addr;
};

typedef struct ip_addr ip_addr_t;

struct ip_info {
    struct ip_addr ip;
    struct ip_addr netmask;
    struct ip_addr gw;
};
# 78 "/home/napalm/esp/ESP8266_NONOS_SDK/include/ip_addr.h"
uint32 ipaddr_addr(const char *cp);
# 33 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h" 2


# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/queue.h" 1
# 36 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h" 2

# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/spi_flash.h" 1
# 28 "/home/napalm/esp/ESP8266_NONOS_SDK/include/spi_flash.h"
typedef enum {
    SPI_FLASH_RESULT_OK,
    SPI_FLASH_RESULT_ERR,
    SPI_FLASH_RESULT_TIMEOUT
} SpiFlashOpResult;

typedef struct{
 uint32 deviceId;
 uint32 chip_size;
 uint32 block_size;
 uint32 sector_size;
 uint32 page_size;
 uint32 status_mask;
} SpiFlashChip;



uint32 spi_flash_get_id(void);
SpiFlashOpResult spi_flash_erase_sector(uint16 sec);
SpiFlashOpResult spi_flash_write(uint32 des_addr, uint32 *src_addr, uint32 size);
SpiFlashOpResult spi_flash_read(uint32 src_addr, uint32 *des_addr, uint32 size);

typedef SpiFlashOpResult (* user_spi_flash_read)(
  SpiFlashChip *spi,
  uint32 src_addr,
  uint32 *des_addr,
        uint32 size);

void spi_flash_set_read_func(user_spi_flash_read read);

bool spi_flash_erase_protect_enable(void);
bool spi_flash_erase_protect_disable(void);
# 38 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h" 2
# 1 "/home/napalm/esp/ESP8266_NONOS_SDK/include/gpio.h" 1
# 35 "/home/napalm/esp/ESP8266_NONOS_SDK/include/gpio.h"
typedef enum {
    GPIO_PIN_INTR_DISABLE = 0,
    GPIO_PIN_INTR_POSEDGE = 1,
    GPIO_PIN_INTR_NEGEDGE = 2,
    GPIO_PIN_INTR_ANYEDGE = 3,
    GPIO_PIN_INTR_LOLEVEL = 4,
    GPIO_PIN_INTR_HILEVEL = 5
} GPIO_INT_TYPE;







typedef void (* gpio_intr_handler_fn_t)(uint32 intr_mask, void *arg);







void gpio_init(void);
# 70 "/home/napalm/esp/ESP8266_NONOS_SDK/include/gpio.h"
void gpio_output_set(uint32 set_mask,
                     uint32 clear_mask,
                     uint32 enable_mask,
                     uint32 disable_mask);




uint32 gpio_input_get(void);







void gpio_register_set(uint32 reg_id, uint32 value);


uint32 gpio_register_get(uint32 reg_id);
# 102 "/home/napalm/esp/ESP8266_NONOS_SDK/include/gpio.h"
void gpio_intr_handler_register(gpio_intr_handler_fn_t fn, void *arg);


uint32 gpio_intr_pending(void);





void gpio_intr_ack(uint32 ack_mask);

void gpio_pin_wakeup_enable(uint32 i, GPIO_INT_TYPE intr_state);

void gpio_pin_wakeup_disable();

void gpio_pin_intr_state_set(uint32 i, GPIO_INT_TYPE intr_state);
# 39 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h" 2






enum rst_reason {
    REASON_DEFAULT_RST = 0,
    REASON_WDT_RST = 1,
    REASON_EXCEPTION_RST = 2,
    REASON_SOFT_WDT_RST = 3,
    REASON_SOFT_RESTART = 4,
    REASON_DEEP_SLEEP_AWAKE = 5,
    REASON_EXT_SYS_RST = 6
};

struct rst_info{
    uint32 reason;
    uint32 exccause;
    uint32 epc1;
    uint32 epc2;
    uint32 epc3;
    uint32 excvaddr;
    uint32 depc;
};

struct rst_info* system_get_rst_info(void);




void system_restore(void);
void system_restart(void);

bool system_deep_sleep_set_option(uint8 option);
bool system_deep_sleep(uint64 time_in_us);
bool system_deep_sleep_instant(uint64 time_in_us);

uint8 system_upgrade_userbin_check(void);
void system_upgrade_reboot(void);
uint8 system_upgrade_flag_check();
void system_upgrade_flag_set(uint8 flag);

void system_timer_reinit(void);
uint32 system_get_time(void);


enum {
    USER_TASK_PRIO_0 = 0,
    USER_TASK_PRIO_1,
    USER_TASK_PRIO_2,
    USER_TASK_PRIO_MAX
};

bool system_os_task(ETSTask task, uint8 prio, ETSEvent *queue, uint8 qlen);
bool system_os_post(uint8 prio, ETSSignal sig, ETSParam par);

void system_print_meminfo(void);
uint32 system_get_free_heap_size(void);

void system_set_os_print(uint8 onoff);
uint8 system_get_os_print();

uint64 system_mktime(uint32 year, uint32 mon, uint32 day, uint32 hour, uint32 min, uint32 sec);

uint32 system_get_chip_id(void);

typedef void (* init_done_cb_t)(void);

void system_init_done_cb(init_done_cb_t cb);

uint32 system_rtc_clock_cali_proc(void);
uint32 system_get_rtc_time(void);

bool system_rtc_mem_read(uint8 src_addr, void *des_addr, uint16 load_size);
bool system_rtc_mem_write(uint8 des_addr, const void *src_addr, uint16 save_size);

void system_uart_swap(void);
void system_uart_de_swap(void);

uint16 system_adc_read(void);
void system_adc_read_fast(uint16 *adc_addr, uint16 adc_num, uint8 adc_clk_div);
uint16 system_get_vdd33(void);

const char *system_get_sdk_version(void);







uint8 system_get_boot_version(void);
uint32 system_get_userbin_addr(void);
uint8 system_get_boot_mode(void);
bool system_restart_enhance(uint8 bin_type, uint32 bin_addr);




bool system_update_cpu_freq(uint8 freq);
uint8 system_get_cpu_freq(void);

enum flash_size_map {
    FLASH_SIZE_4M_MAP_256_256 = 0,
    FLASH_SIZE_2M,
    FLASH_SIZE_8M_MAP_512_512,
    FLASH_SIZE_16M_MAP_512_512,
    FLASH_SIZE_32M_MAP_512_512,
    FLASH_SIZE_16M_MAP_1024_1024,
    FLASH_SIZE_32M_MAP_1024_1024,
    FLASH_SIZE_32M_MAP_2048_2048,

    FLASH_SIZE_64M_MAP_1024_1024,
    FLASH_SIZE_128M_MAP_1024_1024
};

enum flash_size_map system_get_flash_size_map(void);

void system_phy_set_max_tpw(uint8 max_tpw);
void system_phy_set_tpw_via_vdd33(uint16 vdd33);
void system_phy_set_rfoption(uint8 option);
void system_phy_set_powerup_option(uint8 option);

bool system_param_save_with_protect(uint16 start_sec, void *param, uint16 len);
bool system_param_load(uint16 start_sec, uint16 offset, void *param, uint16 len);

void system_soft_wdt_stop(void);
void system_soft_wdt_restart(void);
void system_soft_wdt_feed(void);

void system_show_malloc(void);






typedef enum _auth_mode {
    AUTH_OPEN = 0,
    AUTH_WEP,
    AUTH_WPA_PSK,
    AUTH_WPA2_PSK,
    AUTH_WPA_WPA2_PSK,
    AUTH_MAX
} AUTH_MODE;

typedef enum _cipher_type {
    CIPHER_NONE = 0,
    CIPHER_WEP40,
    CIPHER_WEP104,
    CIPHER_TKIP,
    CIPHER_CCMP,
    CIPHER_TKIP_CCMP,
    CIPHER_UNKNOWN,
} CIPHER_TYPE;

uint8 wifi_get_opmode(void);
uint8 wifi_get_opmode_default(void);
bool wifi_set_opmode(uint8 opmode);
bool wifi_set_opmode_current(uint8 opmode);
uint8 wifi_get_broadcast_if(void);
bool wifi_set_broadcast_if(uint8 interface);

struct bss_info {
    struct { struct bss_info *stqe_next; } next;

    uint8 bssid[6];
    uint8 ssid[32];
    uint8 ssid_len;
    uint8 channel;
    sint8 rssi;
    AUTH_MODE authmode;
    uint8 is_hidden;
    sint16 freq_offset;
    sint16 freqcal_val;
    uint8 *esp_mesh_ie;
    uint8 simple_pair;
    CIPHER_TYPE pairwise_cipher;
    CIPHER_TYPE group_cipher;
    uint32_t phy_11b:1;
    uint32_t phy_11g:1;
    uint32_t phy_11n:1;
    uint32_t wps:1;
    uint32_t reserved:28;
};

typedef struct _scaninfo {
    struct { struct bss_info *stqh_first; struct bss_info **stqh_last; } *pbss;
    struct espconn *pespconn;
    uint8 totalpage;
    uint8 pagenum;
    uint8 page_sn;
    uint8 data_cnt;
} scaninfo;

typedef void (* scan_done_cb_t)(void *arg, STATUS status);

typedef struct {
    int8 rssi;
    AUTH_MODE authmode;
} wifi_fast_scan_threshold_t;

struct station_config {
    uint8 ssid[32];
    uint8 password[64];
    uint8 channel;
    uint8 bssid_set;

    uint8 bssid[6];
    wifi_fast_scan_threshold_t threshold;
    bool open_and_wep_mode_disable;
    bool all_channel_scan;
};

bool wifi_station_get_config(struct station_config *config);
bool wifi_station_get_config_default(struct station_config *config);
bool wifi_station_set_config(struct station_config *config);
bool wifi_station_set_config_current(struct station_config *config);

bool wifi_station_connect(void);
bool wifi_station_disconnect(void);

void wifi_enable_signaling_measurement(void);
void wifi_disable_signaling_measurement(void);

sint8 wifi_station_get_rssi(void);

typedef enum {
    WIFI_SCAN_TYPE_ACTIVE = 0,
    WIFI_SCAN_TYPE_PASSIVE,
} wifi_scan_type_t;


typedef struct {
    uint32_t min;
    uint32_t max;

} wifi_active_scan_time_t;


typedef union {
    wifi_active_scan_time_t active;
    uint32_t passive;

} wifi_scan_time_t;

struct scan_config {
    uint8 *ssid;
    uint8 *bssid;
    uint8 channel;
    uint8 show_hidden;
    wifi_scan_type_t scan_type;
    wifi_scan_time_t scan_time;
};

bool wifi_station_scan(struct scan_config *config, scan_done_cb_t cb);

uint8 wifi_station_get_auto_connect(void);
bool wifi_station_set_auto_connect(uint8 set);

bool wifi_station_set_reconnect_policy(bool set);

enum {
    STATION_IDLE = 0,
    STATION_CONNECTING,
    STATION_WRONG_PASSWORD,
    STATION_NO_AP_FOUND,
    STATION_CONNECT_FAIL,
    STATION_GOT_IP
};

enum dhcp_status {
    DHCP_STOPPED,
    DHCP_STARTED
};

uint8 wifi_station_get_connect_status(void);

uint8 wifi_station_get_current_ap_id(void);
bool wifi_station_ap_change(uint8 current_ap_id);
bool wifi_station_ap_number_set(uint8 ap_number);
uint8 wifi_station_get_ap_info(struct station_config config[]);

bool wifi_station_dhcpc_start(void);
bool wifi_station_dhcpc_stop(void);
enum dhcp_status wifi_station_dhcpc_status(void);
bool wifi_station_dhcpc_set_maxtry(uint8 num);

char* wifi_station_get_hostname(void);
bool wifi_station_set_hostname(char *name);

int wifi_station_set_cert_key(uint8 *client_cert, int client_cert_len,
    uint8 *private_key, int private_key_len,
    uint8 *private_key_passwd, int private_key_passwd_len);
void wifi_station_clear_cert_key(void);
int wifi_station_set_username(uint8 *username, int len);
void wifi_station_clear_username(void);

struct softap_config {
    uint8 ssid[32];
    uint8 password[64];
    uint8 ssid_len;
    uint8 channel;
    AUTH_MODE authmode;
    uint8 ssid_hidden;
    uint8 max_connection;
    uint16 beacon_interval;
};

bool wifi_softap_get_config(struct softap_config *config);
bool wifi_softap_get_config_default(struct softap_config *config);
bool wifi_softap_set_config(struct softap_config *config);
bool wifi_softap_set_config_current(struct softap_config *config);

struct station_info {
    struct { struct station_info *stqe_next; } next;

    uint8 bssid[6];
    struct ip_addr ip;
};

struct dhcps_lease {
    bool enable;
    struct ip_addr start_ip;
    struct ip_addr end_ip;
};

enum dhcps_offer_option{
    OFFER_START = 0x00,
    OFFER_ROUTER = 0x01,
    OFFER_END
};

uint8 wifi_softap_get_station_num(void);
struct station_info * wifi_softap_get_station_info(void);
void wifi_softap_free_station_info(void);

bool wifi_softap_dhcps_start(void);
bool wifi_softap_dhcps_stop(void);

bool wifi_softap_set_dhcps_lease(struct dhcps_lease *please);
bool wifi_softap_get_dhcps_lease(struct dhcps_lease *please);
uint32 wifi_softap_get_dhcps_lease_time(void);
bool wifi_softap_set_dhcps_lease_time(uint32 minute);
bool wifi_softap_reset_dhcps_lease_time(void);

enum dhcp_status wifi_softap_dhcps_status(void);
bool wifi_softap_set_dhcps_offer_option(uint8 level, void* optarg);




bool wifi_get_ip_info(uint8 if_index, struct ip_info *info);
bool wifi_set_ip_info(uint8 if_index, struct ip_info *info);
bool wifi_get_macaddr(uint8 if_index, uint8 *macaddr);
bool wifi_set_macaddr(uint8 if_index, uint8 *macaddr);

uint8 wifi_get_channel(void);
bool wifi_set_channel(uint8 channel);

void wifi_status_led_install(uint8 gpio_id, uint32 gpio_name, uint8 gpio_func);
void wifi_status_led_uninstall();





void wifi_promiscuous_enable(uint8 promiscuous);

typedef void (* wifi_promiscuous_cb_t)(uint8 *buf, uint16 len);

void wifi_set_promiscuous_rx_cb(wifi_promiscuous_cb_t cb);

void wifi_promiscuous_set_mac(const uint8_t *address);

enum phy_mode {
    PHY_MODE_11B = 1,
    PHY_MODE_11G = 2,
    PHY_MODE_11N = 3
};

enum phy_mode wifi_get_phy_mode(void);
bool wifi_set_phy_mode(enum phy_mode mode);

enum sleep_type {
    NONE_SLEEP_T = 0,
    LIGHT_SLEEP_T,
    MODEM_SLEEP_T
};

enum sleep_level {
    MIN_SLEEP_T,
    MAX_SLEEP_T
};

bool wifi_set_sleep_type(enum sleep_type type);
enum sleep_type wifi_get_sleep_type(void);
bool wifi_set_sleep_level(enum sleep_level level);
enum sleep_level wifi_get_sleep_level(void);
bool wifi_set_listen_interval(uint8 interval);
uint8 wifi_get_listen_interval(void);

void wifi_fpm_open(void);
void wifi_fpm_close(void);
void wifi_fpm_do_wakeup(void);
sint8 wifi_fpm_do_sleep(uint32 sleep_time_in_us);
void wifi_fpm_set_sleep_type(enum sleep_type type);
enum sleep_type wifi_fpm_get_sleep_type(void);

typedef void (*fpm_wakeup_cb)(void);
void wifi_fpm_set_wakeup_cb(fpm_wakeup_cb cb);

void wifi_fpm_auto_sleep_set_in_null_mode(uint8 req);

enum {
    EVENT_STAMODE_CONNECTED = 0,
    EVENT_STAMODE_DISCONNECTED,
    EVENT_STAMODE_AUTHMODE_CHANGE,
    EVENT_STAMODE_GOT_IP,
    EVENT_STAMODE_DHCP_TIMEOUT,
    EVENT_SOFTAPMODE_STACONNECTED,
    EVENT_SOFTAPMODE_STADISCONNECTED,
    EVENT_SOFTAPMODE_PROBEREQRECVED,
    EVENT_OPMODE_CHANGED,
    EVENT_SOFTAPMODE_DISTRIBUTE_STA_IP,
    EVENT_MAX
};

enum {
    REASON_UNSPECIFIED = 1,
    REASON_AUTH_EXPIRE = 2,
    REASON_AUTH_LEAVE = 3,
    REASON_ASSOC_EXPIRE = 4,
    REASON_ASSOC_TOOMANY = 5,
    REASON_NOT_AUTHED = 6,
    REASON_NOT_ASSOCED = 7,
    REASON_ASSOC_LEAVE = 8,
    REASON_ASSOC_NOT_AUTHED = 9,
    REASON_DISASSOC_PWRCAP_BAD = 10,
    REASON_DISASSOC_SUPCHAN_BAD = 11,
    REASON_IE_INVALID = 13,
    REASON_MIC_FAILURE = 14,
    REASON_4WAY_HANDSHAKE_TIMEOUT = 15,
    REASON_GROUP_KEY_UPDATE_TIMEOUT = 16,
    REASON_IE_IN_4WAY_DIFFERS = 17,
    REASON_GROUP_CIPHER_INVALID = 18,
    REASON_PAIRWISE_CIPHER_INVALID = 19,
    REASON_AKMP_INVALID = 20,
    REASON_UNSUPP_RSN_IE_VERSION = 21,
    REASON_INVALID_RSN_IE_CAP = 22,
    REASON_802_1X_AUTH_FAILED = 23,
    REASON_CIPHER_SUITE_REJECTED = 24,

    REASON_BEACON_TIMEOUT = 200,
    REASON_NO_AP_FOUND = 201,
    REASON_AUTH_FAIL = 202,
    REASON_ASSOC_FAIL = 203,
    REASON_HANDSHAKE_TIMEOUT = 204,
};

typedef struct {
    uint8 ssid[32];
    uint8 ssid_len;
    uint8 bssid[6];
    uint8 channel;
} Event_StaMode_Connected_t;

typedef struct {
    uint8 ssid[32];
    uint8 ssid_len;
    uint8 bssid[6];
    uint8 reason;
} Event_StaMode_Disconnected_t;

typedef struct {
    uint8 old_mode;
    uint8 new_mode;
} Event_StaMode_AuthMode_Change_t;

typedef struct {
    struct ip_addr ip;
    struct ip_addr mask;
    struct ip_addr gw;
} Event_StaMode_Got_IP_t;

typedef struct {
    uint8 mac[6];
    uint8 aid;
} Event_SoftAPMode_StaConnected_t;

typedef struct {
    uint8 mac[6];
    struct ip_addr ip;
    uint8 aid;
} Event_SoftAPMode_Distribute_Sta_IP_t;

typedef struct {
    uint8 mac[6];
    uint8 aid;
} Event_SoftAPMode_StaDisconnected_t;

typedef struct {
    int rssi;
    uint8 mac[6];
} Event_SoftAPMode_ProbeReqRecved_t;

typedef struct {
    uint8 old_opmode;
    uint8 new_opmode;
} Event_OpMode_Change_t;

typedef union {
    Event_StaMode_Connected_t connected;
    Event_StaMode_Disconnected_t disconnected;
    Event_StaMode_AuthMode_Change_t auth_change;
    Event_StaMode_Got_IP_t got_ip;
    Event_SoftAPMode_StaConnected_t sta_connected;
    Event_SoftAPMode_Distribute_Sta_IP_t distribute_sta_ip;
    Event_SoftAPMode_StaDisconnected_t sta_disconnected;
    Event_SoftAPMode_ProbeReqRecved_t ap_probereqrecved;
    Event_OpMode_Change_t opmode_changed;
} Event_Info_u;

typedef struct _esp_event {
    uint32 event;
    Event_Info_u event_info;
} System_Event_t;

typedef void (* wifi_event_handler_cb_t)(System_Event_t *event);

void wifi_set_event_handler_cb(wifi_event_handler_cb_t cb);

typedef enum wps_type {
    WPS_TYPE_DISABLE = 0,
    WPS_TYPE_PBC,
    WPS_TYPE_PIN,
    WPS_TYPE_DISPLAY,
    WPS_TYPE_MAX,
} WPS_TYPE_t;

enum wps_cb_status {
    WPS_CB_ST_SUCCESS = 0,
    WPS_CB_ST_FAILED,
    WPS_CB_ST_TIMEOUT,
    WPS_CB_ST_WEP,
};

bool wifi_wps_enable(WPS_TYPE_t wps_type);
bool wifi_wps_disable(void);
bool wifi_wps_start(void);

typedef void (*wps_st_cb_t)(int status);
bool wifi_set_wps_cb(wps_st_cb_t cb);

typedef void (*freedom_outside_cb_t)(uint8 status);
int wifi_register_send_pkt_freedom_cb(freedom_outside_cb_t cb);
void wifi_unregister_send_pkt_freedom_cb(void);
int wifi_send_pkt_freedom(uint8 *buf, int len, bool sys_seq);

int wifi_rfid_locp_recv_open(void);
void wifi_rfid_locp_recv_close(void);

typedef void (*rfid_locp_cb_t)(uint8 *frm, int len, int rssi);
int wifi_register_rfid_locp_recv_cb(rfid_locp_cb_t cb);
void wifi_unregister_rfid_locp_recv_cb(void);

enum FIXED_RATE {
        PHY_RATE_48 = 0x8,
        PHY_RATE_24 = 0x9,
        PHY_RATE_12 = 0xA,
        PHY_RATE_6 = 0xB,
        PHY_RATE_54 = 0xC,
        PHY_RATE_36 = 0xD,
        PHY_RATE_18 = 0xE,
        PHY_RATE_9 = 0xF,
};






int wifi_set_user_fixed_rate(uint8 enable_mask, uint8 rate);
int wifi_get_user_fixed_rate(uint8 *enable_mask, uint8 *rate);

enum support_rate {
    RATE_11B5M = 0,
    RATE_11B11M = 1,
    RATE_11B1M = 2,
    RATE_11B2M = 3,
    RATE_11G6M = 4,
    RATE_11G12M = 5,
    RATE_11G24M = 6,
    RATE_11G48M = 7,
    RATE_11G54M = 8,
    RATE_11G9M = 9,
    RATE_11G18M = 10,
    RATE_11G36M = 11,
};

int wifi_set_user_sup_rate(uint8 min, uint8 max);

enum RATE_11B_ID {
    RATE_11B_B11M = 0,
    RATE_11B_B5M = 1,
    RATE_11B_B2M = 2,
    RATE_11B_B1M = 3,
};

enum RATE_11G_ID {
    RATE_11G_G54M = 0,
    RATE_11G_G48M = 1,
    RATE_11G_G36M = 2,
    RATE_11G_G24M = 3,
    RATE_11G_G18M = 4,
    RATE_11G_G12M = 5,
    RATE_11G_G9M = 6,
    RATE_11G_G6M = 7,
    RATE_11G_B5M = 8,
    RATE_11G_B2M = 9,
    RATE_11G_B1M = 10
};

enum RATE_11N_ID {
    RATE_11N_MCS7S = 0,
    RATE_11N_MCS7 = 1,
    RATE_11N_MCS6 = 2,
    RATE_11N_MCS5 = 3,
    RATE_11N_MCS4 = 4,
    RATE_11N_MCS3 = 5,
    RATE_11N_MCS2 = 6,
    RATE_11N_MCS1 = 7,
    RATE_11N_MCS0 = 8,
    RATE_11N_B5M = 9,
    RATE_11N_B2M = 10,
    RATE_11N_B1M = 11
};
# 690 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h"
bool wifi_set_user_rate_limit(uint8 mode, uint8 ifidx, uint8 max, uint8 min);
uint8 wifi_get_user_limit_rate_mask(void);
bool wifi_set_user_limit_rate_mask(uint8 enable_mask);

enum {
    USER_IE_BEACON = 0,
    USER_IE_PROBE_REQ,
    USER_IE_PROBE_RESP,
    USER_IE_ASSOC_REQ,
    USER_IE_ASSOC_RESP,
    USER_IE_MAX
};

typedef void (*user_ie_manufacturer_recv_cb_t)(uint8 type, const uint8 sa[6], const uint8 m_oui[3], uint8 *ie, uint8 ie_len, int rssi);

bool wifi_set_user_ie(bool enable, uint8 *m_oui, uint8 type, uint8 *user_ie, uint8 len);
int wifi_register_user_ie_manufacturer_recv_cb(user_ie_manufacturer_recv_cb_t cb);
void wifi_unregister_user_ie_manufacturer_recv_cb(void);

void wifi_enable_gpio_wakeup(uint32 i, GPIO_INT_TYPE intr_status);
void wifi_disable_gpio_wakeup(void);

void uart_div_modify(uint8 uart_no, uint32 DivLatchValue);

typedef enum {
    WIFI_COUNTRY_POLICY_AUTO,
    WIFI_COUNTRY_POLICY_MANUAL,
} WIFI_COUNTRY_POLICY;

typedef struct {
    char cc[3];
    uint8_t schan;
    uint8_t nchan;
    uint8_t policy;
} wifi_country_t;
# 745 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h"
bool wifi_set_country(wifi_country_t *country);
# 755 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h"
bool wifi_get_country(wifi_country_t *country);

typedef enum {
    SYSTEM_PARTITION_INVALID = 0,
    SYSTEM_PARTITION_BOOTLOADER,
    SYSTEM_PARTITION_OTA_1,
    SYSTEM_PARTITION_OTA_2,
    SYSTEM_PARTITION_RF_CAL,
    SYSTEM_PARTITION_PHY_DATA,
    SYSTEM_PARTITION_SYSTEM_PARAMETER,
    SYSTEM_PARTITION_AT_PARAMETER,
    SYSTEM_PARTITION_SSL_CLIENT_CERT_PRIVKEY,
    SYSTEM_PARTITION_SSL_CLIENT_CA,
    SYSTEM_PARTITION_SSL_SERVER_CERT_PRIVKEY,
    SYSTEM_PARTITION_SSL_SERVER_CA,
    SYSTEM_PARTITION_WPA2_ENTERPRISE_CERT_PRIVKEY,
    SYSTEM_PARTITION_WPA2_ENTERPRISE_CA,

    SYSTEM_PARTITION_CUSTOMER_BEGIN = 100,
    SYSTEM_PARTITION_MAX
} partition_type_t;

typedef struct {
    partition_type_t type;
    uint32_t addr;
    uint32_t size;
} partition_item_t;
# 793 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h"
bool system_partition_table_regist(
        const partition_item_t* partition_table,
        uint32_t partition_num,
        uint32_t map
    );






uint32_t system_partition_get_ota_partition_size(void);
# 815 "/home/napalm/esp/ESP8266_NONOS_SDK/include/user_interface.h"
bool system_partition_get_item(partition_type_t type, partition_item_t* partition_item);
# 4 "/home/napalm/PlatformIO/Projects/ESP8266_ToolChain/src//main.c" 2


static ETSTimer ptimer;
# 16 "/home/napalm/PlatformIO/Projects/ESP8266_ToolChain/src//main.c"
uint32 user_rf_cal_sector_set(void) {
  enum flash_size_map size_map = system_get_flash_size_map();
  uint32 rf_cal_sec = 0;

  switch (size_map) {
  case FLASH_SIZE_4M_MAP_256_256:
    rf_cal_sec = 128 - 5;
    break;

  case FLASH_SIZE_8M_MAP_512_512:
    rf_cal_sec = 256 - 5;
    break;

  case FLASH_SIZE_16M_MAP_512_512:
  case FLASH_SIZE_16M_MAP_1024_1024:
    rf_cal_sec = 512 - 5;
    break;

  case FLASH_SIZE_32M_MAP_512_512:
  case FLASH_SIZE_32M_MAP_1024_1024:
    rf_cal_sec = 1024 - 5;
    break;

  case FLASH_SIZE_64M_MAP_1024_1024:
    rf_cal_sec = 2048 - 5;
    break;
  case FLASH_SIZE_128M_MAP_1024_1024:
    rf_cal_sec = 4096 - 5;
    break;
  default:
    rf_cal_sec = 0;
    break;
  }
  return rf_cal_sec;
}




void delay(uint32_t count)
{
  while (1) {
  count--;
  }
}

void user_init(void) {
  gpio_init();

  wifi_set_opmode(0x00);

  do { (*((volatile uint32_t *)((0x60000800 + 0x38)))) = (uint32_t)(((*((volatile uint32_t *)((0x60000800 + 0x38)))) & (~(0x13<<4))) |( (((0&0x00000004)<<2)|(0&0x3))<<4)); } while (0);

  gpio_output_set(0, 0, (1 << 2), 0);

  while (1) {
    delay(10000000);
    gpio_output_set(0, (1 << 2), 0, 0);
    delay(10000000);
    gpio_output_set((1 << 2), 0, 0, 0);
  }
}
